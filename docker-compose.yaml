x-ninjapanda-image: &ninjapanda-image ninja-panda:latest
#x-ninjapanda-image: &ninjapanda-image repo.cyberight.org:8443/ninjapanda/ninja-panda:dev-latest

x-healthcheck: &healthcheck
  start_period: 15s
  interval: 10s
  timeout: 2s
  retries: 3

services:
  # Jaeger
  jaeger-all-in-one:
    container_name: jaeger-all-in-one
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - "16686:16686"
      - "14268"
      - "14250"
    networks:
      - ztclient-tester
  # Zipkin
  zipkin-all-in-one:
    container_name: zipkin-all-in-one
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"
    networks:
      - ztclient-tester
  # Collector
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector:latest
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml", "${OTELCOL_ARGS}"]
    volumes:
      - ./conf/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "55679:55679" # zpages extension
    depends_on:
      - jaeger-all-in-one
      - zipkin-all-in-one
    networks:
      - ztclient-tester

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./conf/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - ztclient-tester
  redis:
    container_name: ztclient_redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    networks:
      - ztclient-tester
  kafka:
    container_name: ztclient_kafka
    image: bitnami/kafka:latest
    healthcheck:
      <<: *healthcheck
      test: /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9094 --describe
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://kafka:9093,DOCKER://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,DOCKER://kafka:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    ports:
      - 9092:9092
    networks:
      - ztclient-tester
  postgres:
    container_name: ztclient_postgres
    image: postgres:14-alpine
    healthcheck:
      <<: *healthcheck
      test: pg_isready -d postgres
    user: postgres
    environment:
      - POSTGRES_PASSWORD=n1nj@@dm1n
      - POSTGRES_USER=ninjaadmin
      - POSTGRES_NAME=ninjapanda
      - POSTGRES_DB=ninjapanda
    networks:
      - ztclient-tester
    expose:
      - 5432
    ports:
      - "15100:5432"
  ninjapanda01:
    container_name: ztclient_ninja_panda1
    image: *ninjapanda-image
    healthcheck:
      <<: *healthcheck
      test: ninjapanda health
    restart: always
    environment:
      - NINJA_DB_HOST=ztclient_postgres
      - NINJA_DB_PASS=n1nj@@dm1n
      - NINJA_DB_NAME=ninjapanda
      - NINJA_LOG_LEVEL=trace
      - NINJA_MACHINE_AUTH_URL=http://localhost:3007/login?next_url=client
      - NINJA_GEOCODING_ENABLED=false
      - NINJA_METRICS_LISTEN_ADDR=0.0.0.0:9090
      - NINJA_OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - NINJA_RELAY_FILE_URLS=https://resources-dev.cyberight.net/relay.json
      - CACHE_TYPE=redis
      - CACHE_ADDRESS=ztclient_redis:6379
      - KAFKA_BOOTSTRAP_SERVER=ztclient_kafka:9094
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ztclient-tester
  ninjapanda02:
    container_name: ztclient_ninja_panda2
    image: *ninjapanda-image
    healthcheck:
      <<: *healthcheck
      test: ninjapanda health    
    restart: always
    environment:
      - NINJA_DB_HOST=ztclient_postgres
      - NINJA_DB_PASS=n1nj@@dm1n
      - NINJA_DB_NAME=ninjapanda
      - NINJA_LOG_LEVEL=trace
      - NINJA_MACHINE_AUTH_URL=http://localhost:3007/login?next_url=client
      - NINJA_GEOCODING_ENABLED=false
      - NINJA_METRICS_LISTEN_ADDR=0.0.0.0:9090
      - NINJA_OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - NINJA_RELAY_FILE_URLS=https://resources-dev.cyberight.net/relay.json
      - CACHE_TYPE=redis
      - CACHE_ADDRESS=ztclient_redis:6379
      - KAFKA_BOOTSTRAP_SERVER=ztclient_kafka:9094
    depends_on:
      ninjapanda01:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ztclient-tester
  nginx:
    container_name: ztclient_nginx
    image: nginx:latest
    restart: always
    depends_on:
      ninjapanda01:
        condition: service_healthy
      ninjapanda02:
        condition: service_healthy
    ports:
      - "15000:80"
      - "15200:443"
    volumes:
      - ./conf/nginx/:/etc/nginx      
    networks:
      - ztclient-tester
networks:
  ztclient-tester:
    external: true
